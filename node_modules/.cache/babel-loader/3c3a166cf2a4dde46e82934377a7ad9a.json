{"ast":null,"code":"//     (c) 2012-2016 Airbnb, Inc.\n//\n//     polyglot.js may be freely distributed under the terms of the BSD\n//     license. For all licensing information, details, and documention:\n//     http://airbnb.github.com/polyglot.js\n//\n//\n// Polyglot.js is an I18n helper library written in JavaScript, made to\n// work both in the browser and in Node. It provides a simple solution for\n// interpolation and pluralization, based off of Airbnb's\n// experience adding I18n functionality to its Backbone.js and Node apps.\n//\n// Polylglot is agnostic to your translation backend. It doesn't perform any\n// translation; it simply gives you a way to manage translated phrases from\n// your client- or server-side JavaScript application.\n//\n'use strict';\n\nvar forEach = require('for-each');\n\nvar warning = require('warning');\n\nvar has = require('has');\n\nvar trim = require('string.prototype.trim');\n\nvar warn = function warn(message) {\n  warning(false, message);\n};\n\nvar replace = String.prototype.replace;\nvar split = String.prototype.split; // #### Pluralization methods\n// The string that separates the different phrase possibilities.\n\nvar delimeter = '||||'; // Mapping from pluralization group plural logic.\n\nvar pluralTypes = {\n  arabic: function (n) {\n    // http://www.arabeyes.org/Plural_Forms\n    if (n < 3) {\n      return n;\n    }\n\n    if (n % 100 >= 3 && n % 100 <= 10) return 3;\n    return n % 100 >= 11 ? 4 : 5;\n  },\n  chinese: function () {\n    return 0;\n  },\n  german: function (n) {\n    return n !== 1 ? 1 : 0;\n  },\n  french: function (n) {\n    return n > 1 ? 1 : 0;\n  },\n  russian: function (n) {\n    if (n % 10 === 1 && n % 100 !== 11) {\n      return 0;\n    }\n\n    return n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n  },\n  czech: function (n) {\n    if (n === 1) {\n      return 0;\n    }\n\n    return n >= 2 && n <= 4 ? 1 : 2;\n  },\n  polish: function (n) {\n    if (n === 1) {\n      return 0;\n    }\n\n    return n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n  },\n  icelandic: function (n) {\n    return n % 10 !== 1 || n % 100 === 11 ? 1 : 0;\n  }\n}; // Mapping from pluralization group to individual locales.\n\nvar pluralTypeToLanguages = {\n  arabic: ['ar'],\n  chinese: ['fa', 'id', 'ja', 'ko', 'lo', 'ms', 'th', 'tr', 'zh'],\n  german: ['da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hu', 'it', 'nl', 'no', 'pt', 'sv'],\n  french: ['fr', 'tl', 'pt-br'],\n  russian: ['hr', 'ru', 'lt'],\n  czech: ['cs', 'sk'],\n  polish: ['pl'],\n  icelandic: ['is']\n};\n\nfunction langToTypeMap(mapping) {\n  var ret = {};\n  forEach(mapping, function (langs, type) {\n    forEach(langs, function (lang) {\n      ret[lang] = type;\n    });\n  });\n  return ret;\n}\n\nfunction pluralTypeName(locale) {\n  var langToPluralType = langToTypeMap(pluralTypeToLanguages);\n  return langToPluralType[locale] || langToPluralType[split.call(locale, /-/, 1)[0]] || langToPluralType.en;\n}\n\nfunction pluralTypeIndex(locale, count) {\n  return pluralTypes[pluralTypeName(locale)](count);\n}\n\nvar dollarRegex = /\\$/g;\nvar dollarBillsYall = '$$';\nvar tokenRegex = /%\\{(.*?)\\}/g; // ### transformPhrase(phrase, substitutions, locale)\n//\n// Takes a phrase string and transforms it by choosing the correct\n// plural form and interpolating it.\n//\n//     transformPhrase('Hello, %{name}!', {name: 'Spike'});\n//     // \"Hello, Spike!\"\n//\n// The correct plural form is selected if substitutions.smart_count\n// is set. You can pass in a number instead of an Object as `substitutions`\n// as a shortcut for `smart_count`.\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 1}, 'en');\n//     // \"1 new message\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 2}, 'en');\n//     // \"2 new messages\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', 5, 'en');\n//     // \"5 new messages\"\n//\n// You should pass in a third argument, the locale, to specify the correct plural type.\n// It defaults to `'en'` with 2 plural forms.\n\nfunction transformPhrase(phrase, substitutions, locale) {\n  if (typeof phrase !== 'string') {\n    throw new TypeError('Polyglot.transformPhrase expects argument #1 to be string');\n  }\n\n  if (substitutions == null) {\n    return phrase;\n  }\n\n  var result = phrase; // allow number as a pluralization shortcut\n\n  var options = typeof substitutions === 'number' ? {\n    smart_count: substitutions\n  } : substitutions; // Select plural form: based on a phrase text that contains `n`\n  // plural forms separated by `delimeter`, a `locale`, and a `substitutions.smart_count`,\n  // choose the correct plural form. This is only done if `count` is set.\n\n  if (options.smart_count != null && result) {\n    var texts = split.call(result, delimeter);\n    result = trim(texts[pluralTypeIndex(locale || 'en', options.smart_count)] || texts[0]);\n  } // Interpolate: Creates a `RegExp` object for each interpolation placeholder.\n\n\n  result = replace.call(result, tokenRegex, function (expression, argument) {\n    if (!has(options, argument) || options[argument] == null) {\n      return expression;\n    } // Ensure replacement value is escaped to prevent special $-prefixed regex replace tokens.\n\n\n    return replace.call(options[argument], dollarRegex, dollarBillsYall);\n  });\n  return result;\n} // ### Polyglot class constructor\n\n\nfunction Polyglot(options) {\n  var opts = options || {};\n  this.phrases = {};\n  this.extend(opts.phrases || {});\n  this.currentLocale = opts.locale || 'en';\n  var allowMissing = opts.allowMissing ? transformPhrase : null;\n  this.onMissingKey = typeof opts.onMissingKey === 'function' ? opts.onMissingKey : allowMissing;\n  this.warn = opts.warn || warn;\n} // ### polyglot.locale([locale])\n//\n// Get or set locale. Internally, Polyglot only uses locale for pluralization.\n\n\nPolyglot.prototype.locale = function (newLocale) {\n  if (newLocale) this.currentLocale = newLocale;\n  return this.currentLocale;\n}; // ### polyglot.extend(phrases)\n//\n// Use `extend` to tell Polyglot how to translate a given key.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The key can be any string.  Feel free to call `extend` multiple times;\n// it will override any phrases with the same key, but leave existing phrases\n// untouched.\n//\n// It is also possible to pass nested phrase objects, which get flattened\n// into an object with the nested keys concatenated using dot notation.\n//\n//     polyglot.extend({\n//       \"nav\": {\n//         \"hello\": \"Hello\",\n//         \"hello_name\": \"Hello, %{name}\",\n//         \"sidebar\": {\n//           \"welcome\": \"Welcome\"\n//         }\n//       }\n//     });\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}',\n//     //   'nav.sidebar.welcome': 'Welcome'\n//     // }\n//\n// `extend` accepts an optional second argument, `prefix`, which can be used\n// to prefix every key in the phrases object with some string, using dot\n// notation.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     }, \"nav\");\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}'\n//     // }\n//\n// This feature is used internally to support nested phrase objects.\n\n\nPolyglot.prototype.extend = function (morePhrases, prefix) {\n  forEach(morePhrases, function (phrase, key) {\n    var prefixedKey = prefix ? prefix + '.' + key : key;\n\n    if (typeof phrase === 'object') {\n      this.extend(phrase, prefixedKey);\n    } else {\n      this.phrases[prefixedKey] = phrase;\n    }\n  }, this);\n}; // ### polyglot.unset(phrases)\n// Use `unset` to selectively remove keys from a polyglot instance.\n//\n//     polyglot.unset(\"some_key\");\n//     polyglot.unset({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The unset method can take either a string (for the key), or an object hash with\n// the keys that you would like to unset.\n\n\nPolyglot.prototype.unset = function (morePhrases, prefix) {\n  if (typeof morePhrases === 'string') {\n    delete this.phrases[morePhrases];\n  } else {\n    forEach(morePhrases, function (phrase, key) {\n      var prefixedKey = prefix ? prefix + '.' + key : key;\n\n      if (typeof phrase === 'object') {\n        this.unset(phrase, prefixedKey);\n      } else {\n        delete this.phrases[prefixedKey];\n      }\n    }, this);\n  }\n}; // ### polyglot.clear()\n//\n// Clears all phrases. Useful for special cases, such as freeing\n// up memory if you have lots of phrases but no longer need to\n// perform any translation. Also used internally by `replace`.\n\n\nPolyglot.prototype.clear = function () {\n  this.phrases = {};\n}; // ### polyglot.replace(phrases)\n//\n// Completely replace the existing phrases with a new set of phrases.\n// Normally, just use `extend` to add more phrases, but under certain\n// circumstances, you may want to make sure no old phrases are lying around.\n\n\nPolyglot.prototype.replace = function (newPhrases) {\n  this.clear();\n  this.extend(newPhrases);\n}; // ### polyglot.t(key, options)\n//\n// The most-used method. Provide a key, and `t` will return the\n// phrase.\n//\n//     polyglot.t(\"hello\");\n//     => \"Hello\"\n//\n// The phrase value is provided first by a call to `polyglot.extend()` or\n// `polyglot.replace()`.\n//\n// Pass in an object as the second argument to perform interpolation.\n//\n//     polyglot.t(\"hello_name\", {name: \"Spike\"});\n//     => \"Hello, Spike\"\n//\n// If you like, you can provide a default value in case the phrase is missing.\n// Use the special option key \"_\" to specify a default.\n//\n//     polyglot.t(\"i_like_to_write_in_language\", {\n//       _: \"I like to write in %{language}.\",\n//       language: \"JavaScript\"\n//     });\n//     => \"I like to write in JavaScript.\"\n//\n\n\nPolyglot.prototype.t = function (key, options) {\n  var phrase, result;\n  var opts = options == null ? {} : options;\n\n  if (typeof this.phrases[key] === 'string') {\n    phrase = this.phrases[key];\n  } else if (typeof opts._ === 'string') {\n    phrase = opts._;\n  } else if (this.onMissingKey) {\n    var onMissingKey = this.onMissingKey;\n    result = onMissingKey(key, opts, this.currentLocale);\n  } else {\n    this.warn('Missing translation for key: \"' + key + '\"');\n    result = key;\n  }\n\n  if (typeof phrase === 'string') {\n    result = transformPhrase(phrase, opts, this.currentLocale);\n  }\n\n  return result;\n}; // ### polyglot.has(key)\n//\n// Check if polyglot has a translation for given key\n\n\nPolyglot.prototype.has = function (key) {\n  return has(this.phrases, key);\n}; // export transformPhrase\n\n\nPolyglot.transformPhrase = transformPhrase;\nmodule.exports = Polyglot;","map":{"version":3,"sources":["C:/Users/m2bab/VM/rd2/frontend/node_modules/admin-on-rest/node_modules/node-polyglot/index.js"],"names":["forEach","require","warning","has","trim","warn","message","replace","String","prototype","split","delimeter","pluralTypes","arabic","n","chinese","german","french","russian","czech","polish","icelandic","pluralTypeToLanguages","langToTypeMap","mapping","ret","langs","type","lang","pluralTypeName","locale","langToPluralType","call","en","pluralTypeIndex","count","dollarRegex","dollarBillsYall","tokenRegex","transformPhrase","phrase","substitutions","TypeError","result","options","smart_count","texts","expression","argument","Polyglot","opts","phrases","extend","currentLocale","allowMissing","onMissingKey","newLocale","morePhrases","prefix","key","prefixedKey","unset","clear","newPhrases","t","_","module","exports"],"mappings":"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","sourcesContent":["//     (c) 2012-2016 Airbnb, Inc.\n//\n//     polyglot.js may be freely distributed under the terms of the BSD\n//     license. For all licensing information, details, and documention:\n//     http://airbnb.github.com/polyglot.js\n//\n//\n// Polyglot.js is an I18n helper library written in JavaScript, made to\n// work both in the browser and in Node. It provides a simple solution for\n// interpolation and pluralization, based off of Airbnb's\n// experience adding I18n functionality to its Backbone.js and Node apps.\n//\n// Polylglot is agnostic to your translation backend. It doesn't perform any\n// translation; it simply gives you a way to manage translated phrases from\n// your client- or server-side JavaScript application.\n//\n\n'use strict';\n\nvar forEach = require('for-each');\nvar warning = require('warning');\nvar has = require('has');\nvar trim = require('string.prototype.trim');\n\nvar warn = function warn(message) {\n  warning(false, message);\n};\n\nvar replace = String.prototype.replace;\nvar split = String.prototype.split;\n\n// #### Pluralization methods\n// The string that separates the different phrase possibilities.\nvar delimeter = '||||';\n\n// Mapping from pluralization group plural logic.\nvar pluralTypes = {\n  arabic: function (n) {\n    // http://www.arabeyes.org/Plural_Forms\n    if (n < 3) { return n; }\n    if (n % 100 >= 3 && n % 100 <= 10) return 3;\n    return n % 100 >= 11 ? 4 : 5;\n  },\n  chinese: function () { return 0; },\n  german: function (n) { return n !== 1 ? 1 : 0; },\n  french: function (n) { return n > 1 ? 1 : 0; },\n  russian: function (n) {\n    if (n % 10 === 1 && n % 100 !== 11) { return 0; }\n    return n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n  },\n  czech: function (n) {\n    if (n === 1) { return 0; }\n    return (n >= 2 && n <= 4) ? 1 : 2;\n  },\n  polish: function (n) {\n    if (n === 1) { return 0; }\n    return n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n  },\n  icelandic: function (n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; }\n};\n\n// Mapping from pluralization group to individual locales.\nvar pluralTypeToLanguages = {\n  arabic: ['ar'],\n  chinese: ['fa', 'id', 'ja', 'ko', 'lo', 'ms', 'th', 'tr', 'zh'],\n  german: ['da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hu', 'it', 'nl', 'no', 'pt', 'sv'],\n  french: ['fr', 'tl', 'pt-br'],\n  russian: ['hr', 'ru', 'lt'],\n  czech: ['cs', 'sk'],\n  polish: ['pl'],\n  icelandic: ['is']\n};\n\nfunction langToTypeMap(mapping) {\n  var ret = {};\n  forEach(mapping, function (langs, type) {\n    forEach(langs, function (lang) {\n      ret[lang] = type;\n    });\n  });\n  return ret;\n}\n\nfunction pluralTypeName(locale) {\n  var langToPluralType = langToTypeMap(pluralTypeToLanguages);\n  return langToPluralType[locale]\n    || langToPluralType[split.call(locale, /-/, 1)[0]]\n    || langToPluralType.en;\n}\n\nfunction pluralTypeIndex(locale, count) {\n  return pluralTypes[pluralTypeName(locale)](count);\n}\n\nvar dollarRegex = /\\$/g;\nvar dollarBillsYall = '$$';\nvar tokenRegex = /%\\{(.*?)\\}/g;\n\n// ### transformPhrase(phrase, substitutions, locale)\n//\n// Takes a phrase string and transforms it by choosing the correct\n// plural form and interpolating it.\n//\n//     transformPhrase('Hello, %{name}!', {name: 'Spike'});\n//     // \"Hello, Spike!\"\n//\n// The correct plural form is selected if substitutions.smart_count\n// is set. You can pass in a number instead of an Object as `substitutions`\n// as a shortcut for `smart_count`.\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 1}, 'en');\n//     // \"1 new message\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 2}, 'en');\n//     // \"2 new messages\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', 5, 'en');\n//     // \"5 new messages\"\n//\n// You should pass in a third argument, the locale, to specify the correct plural type.\n// It defaults to `'en'` with 2 plural forms.\nfunction transformPhrase(phrase, substitutions, locale) {\n  if (typeof phrase !== 'string') {\n    throw new TypeError('Polyglot.transformPhrase expects argument #1 to be string');\n  }\n\n  if (substitutions == null) {\n    return phrase;\n  }\n\n  var result = phrase;\n\n  // allow number as a pluralization shortcut\n  var options = typeof substitutions === 'number' ? { smart_count: substitutions } : substitutions;\n\n  // Select plural form: based on a phrase text that contains `n`\n  // plural forms separated by `delimeter`, a `locale`, and a `substitutions.smart_count`,\n  // choose the correct plural form. This is only done if `count` is set.\n  if (options.smart_count != null && result) {\n    var texts = split.call(result, delimeter);\n    result = trim(texts[pluralTypeIndex(locale || 'en', options.smart_count)] || texts[0]);\n  }\n\n  // Interpolate: Creates a `RegExp` object for each interpolation placeholder.\n  result = replace.call(result, tokenRegex, function (expression, argument) {\n    if (!has(options, argument) || options[argument] == null) { return expression; }\n    // Ensure replacement value is escaped to prevent special $-prefixed regex replace tokens.\n    return replace.call(options[argument], dollarRegex, dollarBillsYall);\n  });\n\n  return result;\n}\n\n// ### Polyglot class constructor\nfunction Polyglot(options) {\n  var opts = options || {};\n  this.phrases = {};\n  this.extend(opts.phrases || {});\n  this.currentLocale = opts.locale || 'en';\n  var allowMissing = opts.allowMissing ? transformPhrase : null;\n  this.onMissingKey = typeof opts.onMissingKey === 'function' ? opts.onMissingKey : allowMissing;\n  this.warn = opts.warn || warn;\n}\n\n// ### polyglot.locale([locale])\n//\n// Get or set locale. Internally, Polyglot only uses locale for pluralization.\nPolyglot.prototype.locale = function (newLocale) {\n  if (newLocale) this.currentLocale = newLocale;\n  return this.currentLocale;\n};\n\n// ### polyglot.extend(phrases)\n//\n// Use `extend` to tell Polyglot how to translate a given key.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The key can be any string.  Feel free to call `extend` multiple times;\n// it will override any phrases with the same key, but leave existing phrases\n// untouched.\n//\n// It is also possible to pass nested phrase objects, which get flattened\n// into an object with the nested keys concatenated using dot notation.\n//\n//     polyglot.extend({\n//       \"nav\": {\n//         \"hello\": \"Hello\",\n//         \"hello_name\": \"Hello, %{name}\",\n//         \"sidebar\": {\n//           \"welcome\": \"Welcome\"\n//         }\n//       }\n//     });\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}',\n//     //   'nav.sidebar.welcome': 'Welcome'\n//     // }\n//\n// `extend` accepts an optional second argument, `prefix`, which can be used\n// to prefix every key in the phrases object with some string, using dot\n// notation.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     }, \"nav\");\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}'\n//     // }\n//\n// This feature is used internally to support nested phrase objects.\nPolyglot.prototype.extend = function (morePhrases, prefix) {\n  forEach(morePhrases, function (phrase, key) {\n    var prefixedKey = prefix ? prefix + '.' + key : key;\n    if (typeof phrase === 'object') {\n      this.extend(phrase, prefixedKey);\n    } else {\n      this.phrases[prefixedKey] = phrase;\n    }\n  }, this);\n};\n\n// ### polyglot.unset(phrases)\n// Use `unset` to selectively remove keys from a polyglot instance.\n//\n//     polyglot.unset(\"some_key\");\n//     polyglot.unset({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The unset method can take either a string (for the key), or an object hash with\n// the keys that you would like to unset.\nPolyglot.prototype.unset = function (morePhrases, prefix) {\n  if (typeof morePhrases === 'string') {\n    delete this.phrases[morePhrases];\n  } else {\n    forEach(morePhrases, function (phrase, key) {\n      var prefixedKey = prefix ? prefix + '.' + key : key;\n      if (typeof phrase === 'object') {\n        this.unset(phrase, prefixedKey);\n      } else {\n        delete this.phrases[prefixedKey];\n      }\n    }, this);\n  }\n};\n\n// ### polyglot.clear()\n//\n// Clears all phrases. Useful for special cases, such as freeing\n// up memory if you have lots of phrases but no longer need to\n// perform any translation. Also used internally by `replace`.\nPolyglot.prototype.clear = function () {\n  this.phrases = {};\n};\n\n// ### polyglot.replace(phrases)\n//\n// Completely replace the existing phrases with a new set of phrases.\n// Normally, just use `extend` to add more phrases, but under certain\n// circumstances, you may want to make sure no old phrases are lying around.\nPolyglot.prototype.replace = function (newPhrases) {\n  this.clear();\n  this.extend(newPhrases);\n};\n\n\n// ### polyglot.t(key, options)\n//\n// The most-used method. Provide a key, and `t` will return the\n// phrase.\n//\n//     polyglot.t(\"hello\");\n//     => \"Hello\"\n//\n// The phrase value is provided first by a call to `polyglot.extend()` or\n// `polyglot.replace()`.\n//\n// Pass in an object as the second argument to perform interpolation.\n//\n//     polyglot.t(\"hello_name\", {name: \"Spike\"});\n//     => \"Hello, Spike\"\n//\n// If you like, you can provide a default value in case the phrase is missing.\n// Use the special option key \"_\" to specify a default.\n//\n//     polyglot.t(\"i_like_to_write_in_language\", {\n//       _: \"I like to write in %{language}.\",\n//       language: \"JavaScript\"\n//     });\n//     => \"I like to write in JavaScript.\"\n//\nPolyglot.prototype.t = function (key, options) {\n  var phrase, result;\n  var opts = options == null ? {} : options;\n  if (typeof this.phrases[key] === 'string') {\n    phrase = this.phrases[key];\n  } else if (typeof opts._ === 'string') {\n    phrase = opts._;\n  } else if (this.onMissingKey) {\n    var onMissingKey = this.onMissingKey;\n    result = onMissingKey(key, opts, this.currentLocale);\n  } else {\n    this.warn('Missing translation for key: \"' + key + '\"');\n    result = key;\n  }\n  if (typeof phrase === 'string') {\n    result = transformPhrase(phrase, opts, this.currentLocale);\n  }\n  return result;\n};\n\n\n// ### polyglot.has(key)\n//\n// Check if polyglot has a translation for given key\nPolyglot.prototype.has = function (key) {\n  return has(this.phrases, key);\n};\n\n// export transformPhrase\nPolyglot.transformPhrase = transformPhrase;\n\nmodule.exports = Polyglot;\n"]},"metadata":{},"sourceType":"script"}