{"ast":null,"code":"import { stringify } from 'query-string';\nimport { fetchUtils } from 'ra-core';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction tokenAuthProvider(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var opts = _extends({\n    obtainAuthTokenUrl: '/api-token-auth/'\n  }, options);\n\n  return {\n    login: function (_ref) {\n      var username = _ref.username,\n          password = _ref.password;\n\n      try {\n        var request = new Request(opts.obtainAuthTokenUrl, {\n          method: 'POST',\n          body: JSON.stringify({\n            username: username,\n            password: password\n          }),\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          })\n        });\n        return Promise.resolve(fetch(request)).then(function (response) {\n          var _exit = false;\n\n          function _temp2(_result) {\n            if (_exit) return _result;\n\n            if (response.headers.get('content-type') !== 'application/json') {\n              throw new Error(response.statusText);\n            }\n\n            return Promise.resolve(response.json()).then(function (json) {\n              var error = json.non_field_errors;\n              throw new Error(error || response.statusText);\n            });\n          }\n\n          var _temp = function () {\n            if (response.ok) {\n              var _localStorage2 = localStorage,\n                  _setItem2 = _localStorage2.setItem;\n              return Promise.resolve(response.json()).then(function (_response$json) {\n                _setItem2.call(_localStorage2, 'token', _response$json.token);\n\n                _exit = true;\n              });\n            }\n          }();\n\n          return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    logout: function logout() {\n      localStorage.removeItem('token');\n      return Promise.resolve();\n    },\n    checkAuth: function checkAuth() {\n      return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n    },\n    checkError: function checkError(error) {\n      var status = error.status;\n\n      if (status === 401 || status === 403) {\n        localStorage.removeItem('token');\n        return Promise.reject();\n      }\n\n      return Promise.resolve();\n    },\n    getPermissions: function getPermissions() {\n      return Promise.resolve();\n    }\n  };\n}\n\nfunction createOptionsFromToken() {\n  var token = localStorage.getItem('token');\n\n  if (!token) {\n    return {};\n  }\n\n  return {\n    user: {\n      authenticated: true,\n      token: 'Token ' + token\n    }\n  };\n}\n\nfunction fetchJsonWithAuthToken(url, options) {\n  return fetchUtils.fetchJson(url, Object.assign(createOptionsFromToken(), options));\n}\n\nfunction jwtTokenAuthProvider(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var opts = _extends({\n    obtainAuthTokenUrl: '/api/token/'\n  }, options);\n\n  return {\n    login: function (_ref) {\n      var username = _ref.username,\n          password = _ref.password;\n\n      try {\n        var request = new Request(opts.obtainAuthTokenUrl, {\n          method: 'POST',\n          body: JSON.stringify({\n            username: username,\n            password: password\n          }),\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          })\n        });\n        return Promise.resolve(fetch(request)).then(function (response) {\n          var _exit = false;\n\n          function _temp2(_result) {\n            if (_exit) return _result;\n\n            if (response.headers.get('content-type') !== 'application/json') {\n              throw new Error(response.statusText);\n            }\n\n            return Promise.resolve(response.json()).then(function (json) {\n              var error = json.non_field_errors;\n              throw new Error(error || response.statusText);\n            });\n          }\n\n          var _temp = function () {\n            if (response.ok) {\n              return Promise.resolve(response.json()).then(function (responseJSON) {\n                localStorage.setItem('access', responseJSON.access);\n                localStorage.setItem('refresh', responseJSON.refresh);\n                _exit = true;\n              });\n            }\n          }();\n\n          return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    logout: function logout() {\n      localStorage.removeItem('access');\n      localStorage.removeItem('refresh');\n      return Promise.resolve();\n    },\n    checkAuth: function checkAuth() {\n      return localStorage.getItem('access') ? Promise.resolve() : Promise.reject();\n    },\n    checkError: function checkError(error) {\n      var status = error.status;\n\n      if (status === 401 || status === 403) {\n        localStorage.removeItem('access');\n        localStorage.removeItem('refresh');\n        return Promise.reject();\n      }\n\n      return Promise.resolve();\n    },\n    getPermissions: function getPermissions() {\n      return Promise.resolve();\n    }\n  };\n}\n\nfunction createOptionsFromJWTToken() {\n  var token = localStorage.getItem('access');\n\n  if (!token) {\n    return {};\n  }\n\n  return {\n    user: {\n      authenticated: true,\n      token: 'Bearer ' + token\n    }\n  };\n}\n\nfunction fetchJsonWithAuthJWTToken(url, options) {\n  return fetchUtils.fetchJson(url, Object.assign(createOptionsFromJWTToken(), options));\n}\n\nvar getPaginationQuery = function getPaginationQuery(pagination) {\n  return {\n    page: pagination.page,\n    page_size: pagination.perPage\n  };\n};\n\nvar getFilterQuery = function getFilterQuery(filter) {\n  var search = filter.q,\n      otherSearchParams = _objectWithoutPropertiesLoose(filter, [\"q\"]);\n\n  return _extends(_extends({}, otherSearchParams), {}, {\n    search: search\n  });\n};\n\nvar getOrderingQuery = function getOrderingQuery(sort) {\n  var field = sort.field,\n      order = sort.order;\n  return {\n    ordering: \"\" + (order === 'ASC' ? '' : '-') + field\n  };\n};\n\nvar index = function (apiUrl, httpClient) {\n  if (httpClient === void 0) {\n    httpClient = fetchUtils.fetchJson;\n  }\n\n  var getOneJson = function getOneJson(resource, id) {\n    return httpClient(apiUrl + \"/\" + resource + \"/\" + id + \"/\").then(function (response) {\n      return response.json;\n    });\n  };\n\n  return {\n    getList: function (resource, params) {\n      try {\n        var query = _extends(_extends(_extends({}, getFilterQuery(params.filter)), getPaginationQuery(params.pagination)), getOrderingQuery(params.sort));\n\n        var url = apiUrl + \"/\" + resource + \"/?\" + stringify(query);\n        return Promise.resolve(httpClient(url)).then(function (_ref) {\n          var json = _ref.json;\n          return {\n            data: json.results,\n            total: json.count\n          };\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    getOne: function (resource, params) {\n      try {\n        return Promise.resolve(getOneJson(resource, params.id)).then(function (data) {\n          return {\n            data: data\n          };\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    getMany: function getMany(resource, params) {\n      return Promise.all(params.ids.map(function (id) {\n        return getOneJson(resource, id);\n      })).then(function (data) {\n        return {\n          data: data\n        };\n      });\n    },\n    getManyReference: function (resource, params) {\n      try {\n        var _extends2;\n\n        var query = _extends(_extends(_extends(_extends({}, getFilterQuery(params.filter)), getPaginationQuery(params.pagination)), getOrderingQuery(params.sort)), {}, (_extends2 = {}, _extends2[params.target] = params.id, _extends2));\n\n        var url = apiUrl + \"/\" + resource + \"/?\" + stringify(query);\n        return Promise.resolve(httpClient(url)).then(function (_ref2) {\n          var json = _ref2.json;\n          return {\n            data: json.results,\n            total: json.count\n          };\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    update: function (resource, params) {\n      try {\n        return Promise.resolve(httpClient(apiUrl + \"/\" + resource + \"/\" + params.id + \"/\", {\n          method: 'PATCH',\n          body: JSON.stringify(params.data)\n        })).then(function (_ref3) {\n          var json = _ref3.json;\n          return {\n            data: json\n          };\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    updateMany: function updateMany(resource, params) {\n      return Promise.all(params.ids.map(function (id) {\n        return httpClient(apiUrl + \"/\" + resource + \"/\" + id + \"/\", {\n          method: 'PATCH',\n          body: JSON.stringify(params.data)\n        });\n      })).then(function (responses) {\n        return {\n          data: responses.map(function (_ref4) {\n            var json = _ref4.json;\n            return json.id;\n          })\n        };\n      });\n    },\n    create: function (resource, params) {\n      try {\n        return Promise.resolve(httpClient(apiUrl + \"/\" + resource + \"/\", {\n          method: 'POST',\n          body: JSON.stringify(params.data)\n        })).then(function (_ref5) {\n          var json = _ref5.json;\n          return {\n            data: _extends({}, json)\n          };\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    \"delete\": function _delete(resource, params) {\n      return httpClient(apiUrl + \"/\" + resource + \"/\" + params.id + \"/\", {\n        method: 'DELETE'\n      }).then(function () {\n        return {\n          data: params.previousData\n        };\n      });\n    },\n    deleteMany: function deleteMany(resource, params) {\n      return Promise.all(params.ids.map(function (id) {\n        return httpClient(apiUrl + \"/\" + resource + \"/\" + id + \"/\", {\n          method: 'DELETE'\n        });\n      })).then(function (responses) {\n        return {\n          data: responses.map(function (_ref6) {\n            var json = _ref6.json;\n            return json.id;\n          })\n        };\n      });\n    }\n  };\n};\n\nexport default index;\nexport { fetchJsonWithAuthJWTToken, fetchJsonWithAuthToken, getOrderingQuery, jwtTokenAuthProvider, tokenAuthProvider };","map":{"version":3,"sources":["../src/tokenAuthProvider.ts","../src/jwtTokenAuthProvider.ts","../src/index.ts"],"names":["options","opts","obtainAuthTokenUrl","login","username","password","request","method","body","headers","response","fetch","ok","setItem","json","error","logout","localStorage","Promise","checkAuth","checkError","status","getPermissions","createOptionsFromToken","token","user","authenticated","fetchJsonWithAuthToken","url","fetchUtils","Object","responseJSON","createOptionsFromJWTToken","fetchJsonWithAuthJWTToken","getPaginationQuery","page","pagination","page_size","perPage","getFilterQuery","q","search","otherSearchParams","filter","getOrderingQuery","field","order","sort","ordering","httpClient","fetchJson","getOneJson","apiUrl","getList","query","params","stringify","data","total","count","getOne","getMany","getManyReference","update","JSON","updateMany","create","previousData","deleteMany"],"mappings":"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","sourcesContent":["import { AuthProvider, fetchUtils } from 'ra-core';\n\nexport interface Options {\n  obtainAuthTokenUrl?: string;\n}\n\nfunction tokenAuthProvider(options: Options = {}): AuthProvider {\n  const opts = {\n    obtainAuthTokenUrl: '/api-token-auth/',\n    ...options,\n  };\n  return {\n    login: async ({ username, password }) => {\n      const request = new Request(opts.obtainAuthTokenUrl, {\n        method: 'POST',\n        body: JSON.stringify({ username, password }),\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      const response = await fetch(request);\n      if (response.ok) {\n        localStorage.setItem('token', (await response.json()).token);\n        return;\n      }\n      if (response.headers.get('content-type') !== 'application/json') {\n        throw new Error(response.statusText);\n      }\n\n      const json = await response.json();\n      const error = json.non_field_errors;\n      throw new Error(error || response.statusText);\n    },\n    logout: () => {\n      localStorage.removeItem('token');\n      return Promise.resolve();\n    },\n    checkAuth: () =>\n      localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\n    checkError: error => {\n      const status = error.status;\n      if (status === 401 || status === 403) {\n        localStorage.removeItem('token');\n        return Promise.reject();\n      }\n      return Promise.resolve();\n    },\n    getPermissions: () => {\n      return Promise.resolve();\n    },\n  };\n}\n\nexport function createOptionsFromToken() {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return {};\n  }\n  return {\n    user: {\n      authenticated: true,\n      token: 'Token ' + token,\n    },\n  };\n}\n\nexport function fetchJsonWithAuthToken(url: string, options: object) {\n  return fetchUtils.fetchJson(\n    url,\n    Object.assign(createOptionsFromToken(), options)\n  );\n}\n\nexport default tokenAuthProvider;\n","import { AuthProvider, fetchUtils } from 'ra-core';\n\nexport interface Options {\n  obtainAuthTokenUrl?: string;\n}\n\nfunction jwtTokenAuthProvider(options: Options = {}): AuthProvider {\n  const opts = {\n    obtainAuthTokenUrl: '/api/token/',\n    ...options,\n  };\n  return {\n    login: async ({ username, password }) => {\n      const request = new Request(opts.obtainAuthTokenUrl, {\n        method: 'POST',\n        body: JSON.stringify({ username, password }),\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      const response = await fetch(request);\n      if (response.ok) {\n        const responseJSON = await response.json();\n        localStorage.setItem('access', responseJSON.access);\n        localStorage.setItem('refresh', responseJSON.refresh);\n        return;\n      }\n      if (response.headers.get('content-type') !== 'application/json') {\n        throw new Error(response.statusText);\n      }\n\n      const json = await response.json();\n      const error = json.non_field_errors;\n      throw new Error(error || response.statusText);\n    },\n    logout: () => {\n      localStorage.removeItem('access');\n      localStorage.removeItem('refresh');\n      return Promise.resolve();\n    },\n    checkAuth: () =>\n      localStorage.getItem('access') ? Promise.resolve() : Promise.reject(),\n    checkError: error => {\n      const status = error.status;\n      if (status === 401 || status === 403) {\n        localStorage.removeItem('access');\n        localStorage.removeItem('refresh');\n        return Promise.reject();\n      }\n      return Promise.resolve();\n    },\n    getPermissions: () => {\n      return Promise.resolve();\n    },\n  };\n}\n\nexport function createOptionsFromJWTToken() {\n  const token = localStorage.getItem('access');\n  if (!token) {\n    return {};\n  }\n  return {\n    user: {\n      authenticated: true,\n      token: 'Bearer ' + token,\n    },\n  };\n}\n\nexport function fetchJsonWithAuthJWTToken(url: string, options: object) {\n  return fetchUtils.fetchJson(\n    url,\n    Object.assign(createOptionsFromJWTToken(), options)\n  );\n}\n\nexport default jwtTokenAuthProvider;\n","import { stringify } from 'query-string';\nimport {\n  Identifier,\n  Pagination,\n  Sort,\n  Filter,\n  fetchUtils,\n  DataProvider,\n} from 'ra-core';\n\nexport {\n  default as tokenAuthProvider,\n  fetchJsonWithAuthToken,\n} from './tokenAuthProvider';\n\nexport {\n  default as jwtTokenAuthProvider,\n  fetchJsonWithAuthJWTToken,\n} from './jwtTokenAuthProvider';\n\nconst getPaginationQuery = (pagination: Pagination) => {\n  return {\n    page: pagination.page,\n    page_size: pagination.perPage,\n  };\n};\n\nconst getFilterQuery = (filter: Filter) => {\n  const { q: search, ...otherSearchParams } = filter;\n  return {\n    ...otherSearchParams,\n    search,\n  };\n};\n\nexport const getOrderingQuery = (sort: Sort) => {\n  const { field, order } = sort;\n  return {\n    ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n  };\n};\n\nexport default (\n  apiUrl: String,\n  httpClient: Function = fetchUtils.fetchJson\n): DataProvider => {\n  const getOneJson = (resource: String, id: Identifier) =>\n    httpClient(`${apiUrl}/${resource}/${id}/`).then(\n      (response: Response) => response.json\n    );\n\n  return {\n    getList: async (resource, params) => {\n      const query = {\n        ...getFilterQuery(params.filter),\n        ...getPaginationQuery(params.pagination),\n        ...getOrderingQuery(params.sort),\n      };\n      const url = `${apiUrl}/${resource}/?${stringify(query)}`;\n\n      const { json } = await httpClient(url);\n\n      return {\n        data: json.results,\n        total: json.count,\n      };\n    },\n\n    getOne: async (resource, params) => {\n      const data = await getOneJson(resource, params.id);\n      return {\n        data,\n      };\n    },\n\n    getMany: (resource, params) => {\n      return Promise.all(\n        params.ids.map(id => getOneJson(resource, id))\n      ).then(data => ({ data }));\n    },\n\n    getManyReference: async (resource, params) => {\n      const query = {\n        ...getFilterQuery(params.filter),\n        ...getPaginationQuery(params.pagination),\n        ...getOrderingQuery(params.sort),\n        [params.target]: params.id,\n      };\n      const url = `${apiUrl}/${resource}/?${stringify(query)}`;\n\n      const { json } = await httpClient(url);\n      return {\n        data: json.results,\n        total: json.count,\n      };\n    },\n\n    update: async (resource, params) => {\n      const { json } = await httpClient(`${apiUrl}/${resource}/${params.id}/`, {\n        method: 'PATCH',\n        body: JSON.stringify(params.data),\n      });\n      return { data: json };\n    },\n\n    updateMany: (resource, params) =>\n      Promise.all(\n        params.ids.map(id =>\n          httpClient(`${apiUrl}/${resource}/${id}/`, {\n            method: 'PATCH',\n            body: JSON.stringify(params.data),\n          })\n        )\n      ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n    create: async (resource, params) => {\n      const { json } = await httpClient(`${apiUrl}/${resource}/`, {\n        method: 'POST',\n        body: JSON.stringify(params.data),\n      });\n      return {\n        data: { ...json },\n      };\n    },\n\n    delete: (resource, params) =>\n      httpClient(`${apiUrl}/${resource}/${params.id}/`, {\n        method: 'DELETE',\n      }).then(() => ({ data: params.previousData })),\n\n    deleteMany: (resource, params) =>\n      Promise.all(\n        params.ids.map(id =>\n          httpClient(`${apiUrl}/${resource}/${id}/`, {\n            method: 'DELETE',\n          })\n        )\n      ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}