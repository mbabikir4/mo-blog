{"ast":null,"code":"import { fetchUtils } from 'admin-on-rest';\nimport { flattenObject } from 'admin-on-rest/lib/util/fetch';\nimport { stringify } from 'query-string';\nimport { GET_LIST, GET_ONE, GET_MANY, GET_MANY_REFERENCE, CREATE, UPDATE, DELETE } from 'admin-on-rest/lib/rest/types';\n\nconst fetchJsonWithToken = (url, options = {}) => {\n  if (localStorage.getItem('token')) {\n    options.user = {\n      authenticated: true,\n      token: 'Token ' + localStorage.getItem('token')\n    };\n  }\n\n  return fetchUtils.fetchJson(url, options);\n};\n/**\n * Maps admin-on-rest queries to a Django REST Framework (DRF) powered REST API\n *\n * @see \n * http://www.django-rest-framework.org/ \n * https://github.com/marmelab/admin-on-rest/blob/master/docs/RestClients.md\n * @example\n * GET_MANY_REFERENCE\n * GET_LIST     => GET http://my.api.url/posts/?_sort=title&_order=ASC&_start=0&_end=24\n * GET_ONE      => GET http://my.api.url/posts/123/\n * UPDATE       => PUT http://my.api.url/posts/123/\n * CREATE       => POST http://my.api.url/posts/123/\n * DELETE       => DELETE http://my.api.url/posts/123/\n */\n\n\nexport default ((apiUrl, httpClient = fetchJsonWithToken) => {\n  /**\n   * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n   * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n   * @param {Object} params The REST request params, depending on the type\n   * @returns {Object} { url, options } The HTTP request parameters\n   */\n  const convertRESTRequestToHTTP = (type, resource, params) => {\n    let url = '';\n    let options = {};\n\n    switch (type) {\n      case GET_MANY_REFERENCE:\n      case GET_LIST:\n        {\n          const page = params.pagination.page || 1;\n          const perPage = params.pagination.perPage || 10; // specify reverse orderings by prefixing the field name with '-'\n\n          const order = params.sort.order == 'DESC' ? '-' : '';\n          const field = params.sort.field || 'id';\n          const queryParams = params.queryParams || '';\n          const query = { ...flattenObject(params.filter),\n            ordering: order + field,\n            // The limit indicates the maximum number of items to return\n            limit: perPage,\n            // for LimitOffsetPagination. The offset indicates the starting position of the query in relation\n            offset: (page - 1) * perPage\n          };\n          url = `${apiUrl}/${resource}/?${stringify(query)}`; // If there's extra query parameters given, add them to the url\n\n          if (queryParams) {\n            url += `&${stringify(queryParams)}`;\n          }\n\n          options.method = 'GET';\n          break;\n        }\n\n      case GET_ONE:\n        url = `${apiUrl}/${resource}/${params.id}/`;\n        break;\n\n      case UPDATE:\n        url = `${apiUrl}/${resource}/${params.id}/`;\n        options.method = 'PUT';\n        options.body = JSON.stringify(params.data);\n        break;\n\n      case CREATE:\n        url = `${apiUrl}/${resource}/`;\n        options.method = 'POST';\n        options.body = JSON.stringify(params.data);\n        break;\n\n      case DELETE:\n        url = `${apiUrl}/${resource}/${params.id}/`;\n        options.method = 'DELETE';\n        break;\n\n      default:\n        throw new Error(`Unsupported fetch action type ${type}`);\n    }\n\n    return {\n      url,\n      options\n    };\n  };\n  /**\n   * @param {Object} response HTTP response from fetch(). Includes status, header and json content.\n   * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n   * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n   * @param {Object} params The REST request params, depending on the type\n   * @returns {Object} REST response in json { data: json } form\n   */\n\n\n  const convertHTTPResponseToREST = (response, type, resource, params) => {\n    const {\n      status,\n      headers,\n      json\n    } = response;\n\n    switch (type) {\n      case GET_LIST:\n      case GET_MANY_REFERENCE:\n        // For rest_framework.pagination.LimitOffsetPagination for pagination,\n        const data = json.results || json;\n        const count = parseInt(headers.get('x-total-count') || json.count || json.length);\n        return {\n          data: data,\n          total: count\n        };\n\n      case DELETE:\n        if (status === 204) {\n          return {\n            data: {\n              \"id\": params.id\n            }\n          };\n        }\n\n        throw new Error('Element not deleted');\n\n      case CREATE:\n      case UPDATE:\n      case GET_ONE:\n        return {\n          data: json\n        };\n\n      default:\n        throw new Error(`Unsupported fetch action type ${type}`);\n    }\n  };\n\n  const convertHTTPErrorToREST = httpError => {\n    const {\n      status,\n      body,\n      name\n    } = httpError;\n\n    if (typeof body === 'object' && body.detail) {\n      httpError.message = body.detail;\n    }\n\n    return Promise.reject(httpError);\n  };\n  /**\n   * @param {string} type Request type, e.g GET_LIST\n   * @param {string} resource Resource name, e.g. \"posts\"\n   * @param {Object} payload Request parameters. Depends on the request type\n   * @returns {Promise} the Promise for a REST response\n   */\n\n\n  return (type, resource, params) => {\n    const {\n      url,\n      options\n    } = convertRESTRequestToHTTP(type, resource, params);\n    return httpClient(url, options).then(response => convertHTTPResponseToREST(response, type, resource, params), httpError => convertHTTPErrorToREST(httpError));\n  };\n});","map":{"version":3,"sources":["C:/Users/m2bab/VM/rd2/frontend/node_modules/aor-django-rest-framework/src/restClient.js"],"names":["fetchUtils","flattenObject","stringify","GET_LIST","GET_ONE","GET_MANY","GET_MANY_REFERENCE","CREATE","UPDATE","DELETE","fetchJsonWithToken","url","options","localStorage","getItem","user","authenticated","token","fetchJson","apiUrl","httpClient","convertRESTRequestToHTTP","type","resource","params","page","pagination","perPage","order","sort","field","queryParams","query","filter","ordering","limit","offset","method","id","body","JSON","data","Error","convertHTTPResponseToREST","response","status","headers","json","results","count","parseInt","get","length","total","convertHTTPErrorToREST","httpError","name","detail","message","Promise","reject","then"],"mappings":"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","sourcesContent":["import { fetchUtils } from 'admin-on-rest';\nimport { flattenObject } from 'admin-on-rest/lib/util/fetch';\nimport { stringify } from 'query-string';\nimport {\n    GET_LIST,\n    GET_ONE,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    CREATE,\n    UPDATE,\n    DELETE,\n} from 'admin-on-rest/lib/rest/types';\n\nconst fetchJsonWithToken = (url, options = {}) => {\n    if (localStorage.getItem('token')) {\n        options.user = {\n            authenticated: true,\n            token: 'Token ' + localStorage.getItem('token')\n        };\n    }\n    return fetchUtils.fetchJson(url, options);\n};\n\n/**\n * Maps admin-on-rest queries to a Django REST Framework (DRF) powered REST API\n *\n * @see \n * http://www.django-rest-framework.org/ \n * https://github.com/marmelab/admin-on-rest/blob/master/docs/RestClients.md\n * @example\n * GET_MANY_REFERENCE\n * GET_LIST     => GET http://my.api.url/posts/?_sort=title&_order=ASC&_start=0&_end=24\n * GET_ONE      => GET http://my.api.url/posts/123/\n * UPDATE       => PUT http://my.api.url/posts/123/\n * CREATE       => POST http://my.api.url/posts/123/\n * DELETE       => DELETE http://my.api.url/posts/123/\n */\nexport default (apiUrl, httpClient = fetchJsonWithToken) => {\n\n    /**\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params The REST request params, depending on the type\n     * @returns {Object} { url, options } The HTTP request parameters\n     */\n    const convertRESTRequestToHTTP = (type, resource, params) => {\n        let url = '';\n        let options = {};\n\n        switch (type) {\n            case GET_MANY_REFERENCE:\n            case GET_LIST: {\n                const page = params.pagination.page || 1;\n                const perPage = params.pagination.perPage || 10;\n                // specify reverse orderings by prefixing the field name with '-'\n                const order = params.sort.order == 'DESC' ? '-' : '';\n                const field = params.sort.field || 'id';\n                const queryParams = params.queryParams || '';\n                const query = {\n                    ...flattenObject(params.filter),\n                    ordering: order + field,\n                    // The limit indicates the maximum number of items to return\n                    limit: perPage,\n                    // for LimitOffsetPagination. The offset indicates the starting position of the query in relation\n                    offset: (page - 1) * perPage\n                };\n                url = `${apiUrl}/${resource}/?${stringify(query)}`;\n\n                // If there's extra query parameters given, add them to the url\n                if(queryParams) {\n                    url += `&${stringify(queryParams)}`;\n                }\n\n                options.method = 'GET';\n                break;\n            }\n            case GET_ONE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                break;\n            case UPDATE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                options.method = 'PUT';\n                options.body = JSON.stringify(params.data);\n                break;\n            case CREATE:\n                url = `${apiUrl}/${resource}/`;\n                options.method = 'POST';\n                options.body = JSON.stringify(params.data);\n                break;\n            case DELETE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                options.method = 'DELETE';\n                break;\n\n            default:\n                throw new Error(`Unsupported fetch action type ${type}`);\n        }\n        return { url, options };\n    };\n\n    /**\n     * @param {Object} response HTTP response from fetch(). Includes status, header and json content.\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params The REST request params, depending on the type\n     * @returns {Object} REST response in json { data: json } form\n     */\n    const convertHTTPResponseToREST = (response, type, resource, params) => {\n        const { status, headers, json } = response;\n\n        switch (type) {\n            case GET_LIST:\n            case GET_MANY_REFERENCE:\n                // For rest_framework.pagination.LimitOffsetPagination for pagination,\n                const data = json.results || json;\n                const count = parseInt(headers.get('x-total-count') || json.count || json.length);\n                return {\n                    data: data,\n                    total: count\n                };\n\n            case DELETE:\n                if (status === 204) {\n                    return { data: { \"id\": params.id } };\n                }\n                throw new Error('Element not deleted');\n\n            case CREATE:\n            case UPDATE:\n            case GET_ONE:\n                return { data: json };\n            default:\n                throw new Error(`Unsupported fetch action type ${type}`);\n        }\n    };\n\n    const convertHTTPErrorToREST = (httpError) => {\n        const { status, body, name } = httpError;\n\n        if (typeof (body) === 'object' && body.detail) {        \n            httpError.message = body.detail;\n        }\n        return Promise.reject(httpError);\n    };\n\n    /**\n     * @param {string} type Request type, e.g GET_LIST\n     * @param {string} resource Resource name, e.g. \"posts\"\n     * @param {Object} payload Request parameters. Depends on the request type\n     * @returns {Promise} the Promise for a REST response\n     */\n    return (type, resource, params) => {\n        const { url, options } = convertRESTRequestToHTTP(\n            type,\n            resource,\n            params\n        );\n\n        return httpClient(url, options).then(\n            response => convertHTTPResponseToREST(response, type, resource, params),\n            httpError => convertHTTPErrorToREST(httpError)\n        );\n    };\n};\n"]},"metadata":{},"sourceType":"module"}