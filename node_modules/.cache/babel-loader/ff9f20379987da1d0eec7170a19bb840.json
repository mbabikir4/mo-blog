{"ast":null,"code":"import { stringify } from 'query-string';\nimport { fetchUtils, GET_LIST, GET_ONE, CREATE, UPDATE, UPDATE_MANY, DELETE, DELETE_MANY, GET_MANY, GET_MANY_REFERENCE } from 'react-admin';\n/**\n * Maps react-admin queries to the default format of Django REST Framework\n */\n\nconst drfProvider = (apiUrl, httpClient = fetchUtils.fetchJson) => {\n  /**\n   * @param {String} type React-admin request type, e.g. 'GET_LIST'\n   * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n   * @param {Object} params Request parameters. Depends on the request type\n   * @returns {Object} { url, options } The HTTP request parameters\n   */\n  const convertDataRequestToHttp = (type, resource, params) => {\n    let url = \"\";\n    let options = {};\n\n    switch (type) {\n      case CREATE:\n        url = `${apiUrl}/${resource}/`;\n        options.method = 'POST';\n        options.body = JSON.stringify(params.data);\n        break;\n\n      case GET_ONE:\n        url = `${apiUrl}/${resource}/${params.id}/`;\n        break;\n\n      case GET_LIST:\n        {\n          const {\n            page,\n            perPage\n          } = params.pagination;\n          const {\n            field,\n            order\n          } = params.sort;\n          const {\n            filter\n          } = params;\n          const query = {\n            page,\n            page_size: perPage,\n            ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n            ...filter\n          };\n          url = `${apiUrl}/${resource}/?${stringify(query)}`;\n          break;\n        }\n\n      case GET_MANY_REFERENCE:\n        {\n          const {\n            page,\n            perPage\n          } = params.pagination;\n          const {\n            field,\n            order\n          } = params.sort;\n          const {\n            filter,\n            target,\n            id\n          } = params;\n          const query = {\n            page,\n            page_size: perPage,\n            ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n            ...filter,\n            [target]: id\n          };\n          url = `${apiUrl}/${resource}/?${stringify(query)}`;\n          break;\n        }\n\n      case UPDATE:\n        url = `${apiUrl}/${resource}/${params.id}/`;\n        options.method = 'PUT';\n        options.body = JSON.stringify(params.data);\n        break;\n\n      case DELETE:\n        url = `${apiUrl}/${resource}/${params.id}/`;\n        options.method = 'DELETE';\n        break;\n\n      default:\n        throw new Error(`Unsupported Data Provider request type ${type}`);\n    }\n\n    return {\n      url,\n      options\n    };\n  };\n  /**\n   * @param {Object} response HTTP response from fetch()\n   * @param {String} type React-admin request type, e.g. 'GET_LIST'\n   * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n   * @param {Object} params Request parameters. Depends on the request type\n   * @returns {Object} Data response\n   */\n\n\n  const convertHttpResponse = (response, type, resource, params) => {\n    const {\n      headers,\n      json\n    } = response;\n\n    switch (type) {\n      case GET_LIST:\n      case GET_MANY_REFERENCE:\n        if ('count' in json) {\n          return {\n            data: json.results,\n            total: json.count\n          };\n        } else if (headers.has('content-range')) {\n          return {\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10)\n          };\n        } else if ('detail' in json && json.detail === 'Invalid page.') {\n          return {\n            data: [],\n            total: 0\n          };\n        } else {\n          throw new Error('The total number of results is unknown. The DRF data provider ' + 'expects responses for lists of resources to contain this ' + 'information to build the pagination. If you\\'re not using the ' + 'default PageNumberPagination class, please include this ' + 'information using the Content-Range header OR a \"count\" key ' + 'inside the response.');\n        }\n\n      case CREATE:\n        return {\n          data: { ...params.data,\n            id: json.id\n          }\n        };\n\n      case DELETE:\n        return {\n          data: params.previousData\n        };\n\n      default:\n        return {\n          data: json\n        };\n    }\n  };\n  /**\n   * @param {String} type React-admin request type, e.g. 'GET_LIST'\n   * @param {string} resource Name of the resource to fetch, e.g. 'posts'\n   * @param {Object} params Request parameters. Depends on the request type\n   * @returns {Promise} the Promise for a data response\n   */\n\n\n  return (type, resource, params) => {\n    /**\n     * Split GET_MANY, UPDATE_MANY and DELETE_MANY requests into multiple promises,\n     * since they're not supported by default.\n     */\n    switch (type) {\n      case GET_MANY:\n        return Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}/`, {\n          method: 'GET'\n        }))).then(responses => ({\n          data: responses.map(response => response.json)\n        }));\n\n      case UPDATE_MANY:\n        return Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify(params.data)\n        }))).then(responses => ({\n          data: responses.map(response => response.json)\n        }));\n\n      case DELETE_MANY:\n        return Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'DELETE'\n        }))).then(responses => ({\n          data: responses.map(response => response.json)\n        }));\n\n      default:\n        break;\n    }\n\n    const {\n      url,\n      options\n    } = convertDataRequestToHttp(type, resource, params);\n    return httpClient(url, options).then(response => convertHttpResponse(response, type, resource, params));\n  };\n};\n\nexport default drfProvider;","map":{"version":3,"sources":["C:/Users/m2bab/VM/rd2/frontend/node_modules/ra-data-drf/src/index.js"],"names":["stringify","fetchUtils","GET_LIST","GET_ONE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","GET_MANY","GET_MANY_REFERENCE","drfProvider","apiUrl","httpClient","fetchJson","convertDataRequestToHttp","type","resource","params","url","options","method","body","JSON","data","id","page","perPage","pagination","field","order","sort","filter","query","page_size","ordering","target","Error","convertHttpResponse","response","headers","json","results","total","count","has","parseInt","get","split","pop","detail","previousData","Promise","all","ids","map","then","responses"],"mappings":"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","sourcesContent":["import { stringify } from 'query-string';\nimport {\n    fetchUtils,\n    GET_LIST,\n    GET_ONE,\n    CREATE,\n    UPDATE,\n    UPDATE_MANY,\n    DELETE,\n    DELETE_MANY,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n} from 'react-admin';\n\n\n/**\n * Maps react-admin queries to the default format of Django REST Framework\n */\nconst drfProvider = (apiUrl, httpClient=fetchUtils.fetchJson) => {\n\n    /**\n     * @param {String} type React-admin request type, e.g. 'GET_LIST'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params Request parameters. Depends on the request type\n     * @returns {Object} { url, options } The HTTP request parameters\n     */\n    const convertDataRequestToHttp = (type, resource, params) => {\n        let url = \"\";\n        let options = {};\n\n        switch(type){\n            case CREATE:\n                url = `${apiUrl}/${resource}/`;\n                options.method = 'POST';\n                options.body = JSON.stringify(params.data);\n                break;\n            case GET_ONE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                break;\n            case GET_LIST: {\n                const { page, perPage } = params.pagination;\n                const { field, order } = params.sort;\n                const { filter } = params;\n                const query = {\n                    page,\n                    page_size: perPage,\n                    ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n                    ...filter\n                };\n                url = `${apiUrl}/${resource}/?${stringify(query)}`;\n                break;\n            }\n            case GET_MANY_REFERENCE: {\n                const { page, perPage } = params.pagination;\n                const { field, order } = params.sort;\n                const { filter, target, id } = params;\n                const query = {\n                    page,\n                    page_size: perPage,\n                    ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n                    ...filter,\n                    [target]: id\n                };\n                url = `${apiUrl}/${resource}/?${stringify(query)}`;\n                break;\n            }\n            case UPDATE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                options.method = 'PUT';\n                options.body = JSON.stringify(params.data);\n                break;\n            case DELETE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                options.method = 'DELETE';\n                break;\n            default:\n                throw new Error(`Unsupported Data Provider request type ${type}`);\n        }\n\n        return { url, options };\n    }\n\n    /**\n     * @param {Object} response HTTP response from fetch()\n     * @param {String} type React-admin request type, e.g. 'GET_LIST'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params Request parameters. Depends on the request type\n     * @returns {Object} Data response\n     */\n    const convertHttpResponse = (response, type, resource, params) => {\n        const { headers, json } = response;\n\n        switch (type) {\n            case GET_LIST:\n            case GET_MANY_REFERENCE:\n                if ('count' in json){\n                    return { data: json.results, total: json.count }\n                } else if (headers.has('content-range')) {\n                    return {\n                        data: json,\n                        total: parseInt(\n                            headers\n                            .get('content-range')\n                            .split('/')\n                            .pop(),\n                            10\n                        ),\n                    };\n                } else if ('detail' in json && json.detail === 'Invalid page.') {\n                    return { data: [], total: 0 }\n                } else {\n                    throw new Error(\n                        'The total number of results is unknown. The DRF data provider ' +\n                        'expects responses for lists of resources to contain this ' +\n                        'information to build the pagination. If you\\'re not using the ' +\n                        'default PageNumberPagination class, please include this ' +\n                        'information using the Content-Range header OR a \"count\" key ' +\n                        'inside the response.'\n                    );\n                }\n            case CREATE:\n                return { data: { ...params.data, id: json.id } };\n            case DELETE:\n                return { data: params.previousData };\n            default:\n                return { data: json };\n        }\n    }\n\n    /**\n     * @param {String} type React-admin request type, e.g. 'GET_LIST'\n     * @param {string} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params Request parameters. Depends on the request type\n     * @returns {Promise} the Promise for a data response\n     */\n    return (type, resource, params) => {\n        /**\n         * Split GET_MANY, UPDATE_MANY and DELETE_MANY requests into multiple promises,\n         * since they're not supported by default.\n         */\n        switch (type) {\n            case GET_MANY:\n                return Promise.all(\n                    params.ids.map(id =>\n                        httpClient(`${apiUrl}/${resource}/${id}/`, {\n                            method: 'GET'\n                        })\n                    )\n                ).then(responses => ({\n                    data: responses.map(response => response.json),\n                }));\n            case UPDATE_MANY:\n                return Promise.all(\n                    params.ids.map(id =>\n                        httpClient(`${apiUrl}/${resource}/${id}`, {\n                            method: 'PUT',\n                            body: JSON.stringify(params.data),\n                        })\n                    )\n                ).then(responses => ({\n                    data: responses.map(response => response.json),\n                }));\n            case DELETE_MANY:\n                return Promise.all(\n                    params.ids.map(id =>\n                        httpClient(`${apiUrl}/${resource}/${id}`, {\n                            method: 'DELETE',\n                        })\n                    )\n                ).then(responses => ({\n                    data: responses.map(response => response.json),\n                }));\n            default:\n                break;\n        }\n\n        const { url, options } = convertDataRequestToHttp(type, resource, params);\n        return httpClient(url, options)\n            .then(response => convertHttpResponse(response, type, resource, params));\n    }\n}\n\nexport default drfProvider;\n"]},"metadata":{},"sourceType":"module"}