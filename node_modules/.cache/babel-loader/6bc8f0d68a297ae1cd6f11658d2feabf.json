{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nexports.default = _callee;\n\nvar _reduxSaga = require('redux-saga');\n\nvar _effects = require('redux-saga/effects');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _marked = /*#__PURE__*/_regenerator2.default.mark(finalize),\n    _marked2 = /*#__PURE__*/_regenerator2.default.mark(accumulate),\n    _marked3 = /*#__PURE__*/_regenerator2.default.mark(_callee);\n/**\n * Example\n *\n * let debouncedIds = {\n *   posts: { 4: true, 7: true, 345: true },\n *   authors: { 23: true, 47: true, 78: true },\n * }\n */\n\n\nvar debouncedIds = {};\n\nvar addIds = function addIds(resource, ids) {\n  if (!debouncedIds[resource]) {\n    debouncedIds[resource] = {};\n  }\n\n  ids.forEach(function (id) {\n    debouncedIds[resource][id] = true;\n  }); // fast UNIQUE\n};\n\nvar getIds = function getIds(resource) {\n  var ids = Object.keys(debouncedIds[resource]);\n  delete debouncedIds[resource];\n  return ids;\n};\n\nvar tasks = {};\n/**\n * Fetch the list of accumulated ids after a delay\n *\n * As this gets canceled by subsequent calls to accumulate(), only the last\n * call to finalize() will not be canceled. The delay acts as a\n * debounce.\n *\n * @see http://yelouafi.github.io/redux-saga/docs/recipes/index.html#debouncing\n */\n\nfunction finalize(resource, actionCreator) {\n  return _regenerator2.default.wrap(function finalize$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, _effects.call)(_reduxSaga.delay, 50);\n\n        case 2:\n          _context.next = 4;\n          return (0, _effects.put)(actionCreator(resource, getIds(resource)));\n\n        case 4:\n          delete tasks[resource];\n\n        case 5:\n        case 'end':\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n/**\n * Cancel call to finalize, accumulate ids, and call finalize\n *\n * @example\n * accumulate({ type: CRUD_GET_MANY_ACCUMULATE, payload: { ids: [1, 3, 5], resource: 'posts' } })\n */\n\n\nfunction accumulate(_ref) {\n  var payload = _ref.payload,\n      meta = _ref.meta;\n  var ids, resource;\n  return _regenerator2.default.wrap(function accumulate$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          ids = payload.ids, resource = payload.resource;\n\n          if (!tasks[resource]) {\n            _context2.next = 4;\n            break;\n          }\n\n          _context2.next = 4;\n          return (0, _effects.cancel)(tasks[resource]);\n\n        case 4:\n          addIds(resource, ids);\n          _context2.next = 7;\n          return (0, _effects.fork)(finalize, resource, meta.accumulate);\n\n        case 7:\n          tasks[resource] = _context2.sent;\n\n        case 8:\n        case 'end':\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nfunction _callee() {\n  return _regenerator2.default.wrap(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _effects.takeEvery)(function (action) {\n            return action.meta && action.meta.accumulate;\n          }, accumulate);\n\n        case 2:\n        case 'end':\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["C:/Users/m2bab/VM/rd2/frontend/node_modules/admin-on-rest/lib/sideEffect/saga/referenceFetch.js"],"names":["Object","defineProperty","exports","value","_regenerator","require","_regenerator2","_interopRequireDefault","default","_callee","_reduxSaga","_effects","obj","__esModule","_marked","mark","finalize","_marked2","accumulate","_marked3","debouncedIds","addIds","resource","ids","forEach","id","getIds","keys","tasks","actionCreator","wrap","finalize$","_context","prev","next","call","delay","put","stop","_ref","payload","meta","accumulate$","_context2","cancel","fork","sent","_callee$","_context3","takeEvery","action","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nexports.default = _callee;\n\nvar _reduxSaga = require('redux-saga');\n\nvar _effects = require('redux-saga/effects');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _marked = /*#__PURE__*/_regenerator2.default.mark(finalize),\n    _marked2 = /*#__PURE__*/_regenerator2.default.mark(accumulate),\n    _marked3 = /*#__PURE__*/_regenerator2.default.mark(_callee);\n\n/**\n * Example\n *\n * let debouncedIds = {\n *   posts: { 4: true, 7: true, 345: true },\n *   authors: { 23: true, 47: true, 78: true },\n * }\n */\nvar debouncedIds = {};\nvar addIds = function addIds(resource, ids) {\n    if (!debouncedIds[resource]) {\n        debouncedIds[resource] = {};\n    }\n    ids.forEach(function (id) {\n        debouncedIds[resource][id] = true;\n    }); // fast UNIQUE\n};\nvar getIds = function getIds(resource) {\n    var ids = Object.keys(debouncedIds[resource]);\n    delete debouncedIds[resource];\n    return ids;\n};\n\nvar tasks = {};\n\n/**\n * Fetch the list of accumulated ids after a delay\n *\n * As this gets canceled by subsequent calls to accumulate(), only the last\n * call to finalize() will not be canceled. The delay acts as a\n * debounce.\n *\n * @see http://yelouafi.github.io/redux-saga/docs/recipes/index.html#debouncing\n */\nfunction finalize(resource, actionCreator) {\n    return _regenerator2.default.wrap(function finalize$(_context) {\n        while (1) {\n            switch (_context.prev = _context.next) {\n                case 0:\n                    _context.next = 2;\n                    return (0, _effects.call)(_reduxSaga.delay, 50);\n\n                case 2:\n                    _context.next = 4;\n                    return (0, _effects.put)(actionCreator(resource, getIds(resource)));\n\n                case 4:\n                    delete tasks[resource];\n\n                case 5:\n                case 'end':\n                    return _context.stop();\n            }\n        }\n    }, _marked, this);\n}\n\n/**\n * Cancel call to finalize, accumulate ids, and call finalize\n *\n * @example\n * accumulate({ type: CRUD_GET_MANY_ACCUMULATE, payload: { ids: [1, 3, 5], resource: 'posts' } })\n */\nfunction accumulate(_ref) {\n    var payload = _ref.payload,\n        meta = _ref.meta;\n    var ids, resource;\n    return _regenerator2.default.wrap(function accumulate$(_context2) {\n        while (1) {\n            switch (_context2.prev = _context2.next) {\n                case 0:\n                    ids = payload.ids, resource = payload.resource;\n\n                    if (!tasks[resource]) {\n                        _context2.next = 4;\n                        break;\n                    }\n\n                    _context2.next = 4;\n                    return (0, _effects.cancel)(tasks[resource]);\n\n                case 4:\n                    addIds(resource, ids);\n                    _context2.next = 7;\n                    return (0, _effects.fork)(finalize, resource, meta.accumulate);\n\n                case 7:\n                    tasks[resource] = _context2.sent;\n\n                case 8:\n                case 'end':\n                    return _context2.stop();\n            }\n        }\n    }, _marked2, this);\n}\n\nfunction _callee() {\n    return _regenerator2.default.wrap(function _callee$(_context3) {\n        while (1) {\n            switch (_context3.prev = _context3.next) {\n                case 0:\n                    _context3.next = 2;\n                    return (0, _effects.takeEvery)(function (action) {\n                        return action.meta && action.meta.accumulate;\n                    }, accumulate);\n\n                case 2:\n                case 'end':\n                    return _context3.stop();\n            }\n        }\n    }, _marked3, this);\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}