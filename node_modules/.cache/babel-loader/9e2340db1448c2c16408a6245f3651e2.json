{"ast":null,"code":"import PropTypes from 'prop-types';\nvar any = PropTypes.any,\n    bool = PropTypes.bool,\n    func = PropTypes.func,\n    shape = PropTypes.shape,\n    string = PropTypes.string,\n    oneOfType = PropTypes.oneOfType,\n    object = PropTypes.object,\n    number = PropTypes.number;\nexport var formPropTypes = {\n  // State:\n  anyTouched: bool.isRequired,\n  // true if any of the fields have been marked as touched\n  asyncValidating: oneOfType([bool, string]).isRequired,\n  // true if async validation is running, a string if a field triggered async validation\n  dirty: bool.isRequired,\n  // true if any values are different from initialValues\n  error: any,\n  // form-wide error from '_error' key in validation result\n  form: string.isRequired,\n  // the name of the form\n  invalid: bool.isRequired,\n  // true if there are any validation errors\n  initialized: bool.isRequired,\n  // true if the form has been initialized\n  initialValues: object,\n  // the initialValues object passed to reduxForm\n  pristine: bool.isRequired,\n  // true if the values are the same as initialValues\n  pure: bool.isRequired,\n  // if true, implements shouldComponentUpdate\n  submitting: bool.isRequired,\n  // true if the form is in the process of being submitted\n  submitFailed: bool.isRequired,\n  // true if the form was submitted and failed for any reason\n  submitSucceeded: bool.isRequired,\n  // true if the form was successfully submitted\n  valid: bool.isRequired,\n  // true if there are no validation errors\n  warning: any,\n  // form-wide warning from '_warning' key in validation result\n  // Actions:\n  array: shape({\n    insert: func.isRequired,\n    // function to insert a value into an array field\n    move: func.isRequired,\n    // function to move a value within an array field\n    pop: func.isRequired,\n    // function to pop a value off of an array field\n    push: func.isRequired,\n    // function to push a value onto an array field\n    remove: func.isRequired,\n    // function to remove a value from an array field\n    removeAll: func.isRequired,\n    // function to remove all the values from an array field\n    shift: func.isRequired,\n    // function to shift a value out of an array field\n    splice: func.isRequired,\n    // function to splice a value into an array field\n    swap: func.isRequired,\n    // function to swap values in an array field\n    unshift: func.isRequired // function to unshift a value into an array field\n\n  }),\n  asyncValidate: func.isRequired,\n  // function to trigger async validation\n  autofill: func.isRequired,\n  // action to set a value of a field and mark it as autofilled\n  blur: func.isRequired,\n  // action to mark a field as blurred\n  change: func.isRequired,\n  // action to change the value of a field\n  clearAsyncError: func.isRequired,\n  // action to clear the async error of a field\n  destroy: func.isRequired,\n  // action to destroy the form's data in Redux\n  dispatch: func.isRequired,\n  // the Redux dispatch action\n  handleSubmit: func.isRequired,\n  // function to submit the form\n  initialize: func.isRequired,\n  // action to initialize form data\n  reset: func.isRequired,\n  // action to reset the form data to previously initialized values\n  touch: func.isRequired,\n  // action to mark fields as touched\n  submit: func.isRequired,\n  // action to trigger a submission of the specified form\n  untouch: func.isRequired,\n  // action to mark fields as untouched\n  // triggerSubmit\n  triggerSubmit: bool,\n  // if true, submits the form on componentWillReceiveProps\n  clearSubmit: func.isRequired // called before a triggered submit, by default clears triggerSubmit\n\n};\nexport var fieldInputPropTypes = {\n  checked: bool,\n  name: string.isRequired,\n  onBlur: func.isRequired,\n  onChange: func.isRequired,\n  onDragStart: func.isRequired,\n  onDrop: func.isRequired,\n  onFocus: func.isRequired,\n  value: any\n};\nexport var fieldMetaPropTypes = {\n  active: bool.isRequired,\n  asyncValidating: bool.isRequired,\n  autofilled: bool.isRequired,\n  dirty: bool.isRequired,\n  dispatch: func.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitting: bool.isRequired,\n  submitFailed: bool.isRequired,\n  touched: bool.isRequired,\n  valid: bool.isRequired,\n  visited: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayMetaPropTypes = {\n  dirty: bool.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitFailed: bool,\n  submitting: bool,\n  valid: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayFieldsPropTypes = {\n  name: string.isRequired,\n  forEach: func.isRequired,\n  get: func.isRequired,\n  getAll: func.isRequired,\n  insert: func.isRequired,\n  length: number.isRequired,\n  map: func.isRequired,\n  move: func.isRequired,\n  pop: func.isRequired,\n  push: func.isRequired,\n  reduce: func.isRequired,\n  remove: func.isRequired,\n  removeAll: func.isRequired,\n  shift: func.isRequired,\n  swap: func.isRequired,\n  unshift: func.isRequired\n};\nexport var fieldPropTypes = {\n  input: shape(fieldInputPropTypes).isRequired,\n  meta: shape(fieldMetaPropTypes).isRequired\n};\nexport var fieldArrayPropTypes = {\n  fields: shape(fieldArrayFieldsPropTypes).isRequired,\n  meta: shape(fieldArrayMetaPropTypes).isRequired\n};\nexport default formPropTypes;","map":{"version":3,"sources":["C:/Users/m2bab/VM/rd2/frontend/node_modules/admin-on-rest/node_modules/redux-form/es/propTypes.js"],"names":["PropTypes","any","bool","func","shape","string","oneOfType","object","number","formPropTypes","anyTouched","isRequired","asyncValidating","dirty","error","form","invalid","initialized","initialValues","pristine","pure","submitting","submitFailed","submitSucceeded","valid","warning","array","insert","move","pop","push","remove","removeAll","shift","splice","swap","unshift","asyncValidate","autofill","blur","change","clearAsyncError","destroy","dispatch","handleSubmit","initialize","reset","touch","submit","untouch","triggerSubmit","clearSubmit","fieldInputPropTypes","checked","name","onBlur","onChange","onDragStart","onDrop","onFocus","value","fieldMetaPropTypes","active","autofilled","touched","visited","fieldArrayMetaPropTypes","fieldArrayFieldsPropTypes","forEach","get","getAll","length","map","reduce","fieldPropTypes","input","meta","fieldArrayPropTypes","fields"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\n\nvar any = PropTypes.any,\n    bool = PropTypes.bool,\n    func = PropTypes.func,\n    shape = PropTypes.shape,\n    string = PropTypes.string,\n    oneOfType = PropTypes.oneOfType,\n    object = PropTypes.object,\n    number = PropTypes.number;\n\n\nexport var formPropTypes = {\n  // State:\n  anyTouched: bool.isRequired, // true if any of the fields have been marked as touched\n  asyncValidating: oneOfType([bool, string]).isRequired, // true if async validation is running, a string if a field triggered async validation\n  dirty: bool.isRequired, // true if any values are different from initialValues\n  error: any, // form-wide error from '_error' key in validation result\n  form: string.isRequired, // the name of the form\n  invalid: bool.isRequired, // true if there are any validation errors\n  initialized: bool.isRequired, // true if the form has been initialized\n  initialValues: object, // the initialValues object passed to reduxForm\n  pristine: bool.isRequired, // true if the values are the same as initialValues\n  pure: bool.isRequired, // if true, implements shouldComponentUpdate\n  submitting: bool.isRequired, // true if the form is in the process of being submitted\n  submitFailed: bool.isRequired, // true if the form was submitted and failed for any reason\n  submitSucceeded: bool.isRequired, // true if the form was successfully submitted\n  valid: bool.isRequired, // true if there are no validation errors\n  warning: any, // form-wide warning from '_warning' key in validation result\n  // Actions:\n  array: shape({\n    insert: func.isRequired, // function to insert a value into an array field\n    move: func.isRequired, // function to move a value within an array field\n    pop: func.isRequired, // function to pop a value off of an array field\n    push: func.isRequired, // function to push a value onto an array field\n    remove: func.isRequired, // function to remove a value from an array field\n    removeAll: func.isRequired, // function to remove all the values from an array field\n    shift: func.isRequired, // function to shift a value out of an array field\n    splice: func.isRequired, // function to splice a value into an array field\n    swap: func.isRequired, // function to swap values in an array field\n    unshift: func.isRequired // function to unshift a value into an array field\n  }),\n  asyncValidate: func.isRequired, // function to trigger async validation\n  autofill: func.isRequired, // action to set a value of a field and mark it as autofilled\n  blur: func.isRequired, // action to mark a field as blurred\n  change: func.isRequired, // action to change the value of a field\n  clearAsyncError: func.isRequired, // action to clear the async error of a field\n  destroy: func.isRequired, // action to destroy the form's data in Redux\n  dispatch: func.isRequired, // the Redux dispatch action\n  handleSubmit: func.isRequired, // function to submit the form\n  initialize: func.isRequired, // action to initialize form data\n  reset: func.isRequired, // action to reset the form data to previously initialized values\n  touch: func.isRequired, // action to mark fields as touched\n  submit: func.isRequired, // action to trigger a submission of the specified form\n  untouch: func.isRequired, // action to mark fields as untouched\n\n  // triggerSubmit\n  triggerSubmit: bool, // if true, submits the form on componentWillReceiveProps\n  clearSubmit: func.isRequired // called before a triggered submit, by default clears triggerSubmit\n};\n\nexport var fieldInputPropTypes = {\n  checked: bool,\n  name: string.isRequired,\n  onBlur: func.isRequired,\n  onChange: func.isRequired,\n  onDragStart: func.isRequired,\n  onDrop: func.isRequired,\n  onFocus: func.isRequired,\n  value: any\n};\n\nexport var fieldMetaPropTypes = {\n  active: bool.isRequired,\n  asyncValidating: bool.isRequired,\n  autofilled: bool.isRequired,\n  dirty: bool.isRequired,\n  dispatch: func.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitting: bool.isRequired,\n  submitFailed: bool.isRequired,\n  touched: bool.isRequired,\n  valid: bool.isRequired,\n  visited: bool.isRequired,\n  warning: string\n};\n\nexport var fieldArrayMetaPropTypes = {\n  dirty: bool.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitFailed: bool,\n  submitting: bool,\n  valid: bool.isRequired,\n  warning: string\n};\n\nexport var fieldArrayFieldsPropTypes = {\n  name: string.isRequired,\n  forEach: func.isRequired,\n  get: func.isRequired,\n  getAll: func.isRequired,\n  insert: func.isRequired,\n  length: number.isRequired,\n  map: func.isRequired,\n  move: func.isRequired,\n  pop: func.isRequired,\n  push: func.isRequired,\n  reduce: func.isRequired,\n  remove: func.isRequired,\n  removeAll: func.isRequired,\n  shift: func.isRequired,\n  swap: func.isRequired,\n  unshift: func.isRequired\n};\n\nexport var fieldPropTypes = {\n  input: shape(fieldInputPropTypes).isRequired,\n  meta: shape(fieldMetaPropTypes).isRequired\n};\n\nexport var fieldArrayPropTypes = {\n  fields: shape(fieldArrayFieldsPropTypes).isRequired,\n  meta: shape(fieldArrayMetaPropTypes).isRequired\n};\n\nexport default formPropTypes;"]},"metadata":{},"sourceType":"module"}