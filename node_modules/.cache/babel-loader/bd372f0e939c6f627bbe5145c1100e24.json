{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRecord = exports.addRecordsFactory = undefined;\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends4 = require('babel-runtime/helpers/extends');\n\nvar _extends5 = _interopRequireDefault(_extends4);\n\nvar _fetchActions = require('../../../actions/fetchActions');\n\nvar _types = require('../../../rest/types');\n\nvar _getFetchedAt = require('../../../util/getFetchedAt');\n\nvar _getFetchedAt2 = _interopRequireDefault(_getFetchedAt);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Add new records to the pool, and remove outdated ones.\n *\n * This is the equivalent of a stale-while-revalidate caching strategy:\n * The cached data is displayed before fetching, and stale data is removed\n * only once fresh data is fetched.\n */\n\n\nvar addRecordsFactory = exports.addRecordsFactory = function addRecordsFactory(getFetchedAt) {\n  return function () {\n    var newRecords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var oldRecords = arguments[1];\n    var newFetchedAt = getFetchedAt(newRecords.map(function (_ref) {\n      var id = _ref.id;\n      return id;\n    }), oldRecords.fetchedAt);\n    var newRecordsById = newRecords.reduce(function (acc, record) {\n      return (0, _extends5.default)({}, acc, (0, _defineProperty3.default)({}, record.id, record));\n    }, {});\n    var records = Object.keys(newFetchedAt).reduce(function (acc, id) {\n      return (0, _extends5.default)({}, acc, (0, _defineProperty3.default)({}, id, newRecordsById[id] || oldRecords[id]));\n    }, {});\n    Object.defineProperty(records, 'fetchedAt', {\n      value: newFetchedAt\n    }); // non enumerable by default\n\n    return records;\n  };\n};\n\nvar addRecords = addRecordsFactory(_getFetchedAt2.default);\nvar initialState = {};\nObject.defineProperty(initialState, 'fetchedAt', {\n  value: {}\n}); // non enumerable by default\n\nexports.default = function (resource) {\n  return function () {\n    var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    var _ref2 = arguments[1];\n    var payload = _ref2.payload,\n        meta = _ref2.meta;\n\n    if (!meta || meta.resource !== resource) {\n      return previousState;\n    }\n\n    if (!meta.fetchResponse || meta.fetchStatus !== _fetchActions.FETCH_END) {\n      return previousState;\n    }\n\n    switch (meta.fetchResponse) {\n      case _types.GET_LIST:\n      case _types.GET_MANY:\n      case _types.GET_MANY_REFERENCE:\n        return addRecords(payload.data, previousState);\n\n      case _types.GET_ONE:\n      case _types.UPDATE:\n      case _types.CREATE:\n        return addRecords([payload.data], previousState);\n\n      default:\n        return previousState;\n    }\n  };\n};\n\nvar getRecord = exports.getRecord = function getRecord(state, id) {\n  return state[id];\n};","map":{"version":3,"sources":["C:/Users/m2bab/VM/rd2/frontend/node_modules/admin-on-rest/lib/reducer/admin/resource/data.js"],"names":["Object","defineProperty","exports","value","getRecord","addRecordsFactory","undefined","_defineProperty2","require","_defineProperty3","_interopRequireDefault","_extends4","_extends5","_fetchActions","_types","_getFetchedAt","_getFetchedAt2","obj","__esModule","default","getFetchedAt","newRecords","arguments","length","oldRecords","newFetchedAt","map","_ref","id","fetchedAt","newRecordsById","reduce","acc","record","records","keys","addRecords","initialState","resource","previousState","_ref2","payload","meta","fetchResponse","fetchStatus","FETCH_END","GET_LIST","GET_MANY","GET_MANY_REFERENCE","data","GET_ONE","UPDATE","CREATE","state"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getRecord = exports.addRecordsFactory = undefined;\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends4 = require('babel-runtime/helpers/extends');\n\nvar _extends5 = _interopRequireDefault(_extends4);\n\nvar _fetchActions = require('../../../actions/fetchActions');\n\nvar _types = require('../../../rest/types');\n\nvar _getFetchedAt = require('../../../util/getFetchedAt');\n\nvar _getFetchedAt2 = _interopRequireDefault(_getFetchedAt);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Add new records to the pool, and remove outdated ones.\n *\n * This is the equivalent of a stale-while-revalidate caching strategy:\n * The cached data is displayed before fetching, and stale data is removed\n * only once fresh data is fetched.\n */\nvar addRecordsFactory = exports.addRecordsFactory = function addRecordsFactory(getFetchedAt) {\n    return function () {\n        var newRecords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var oldRecords = arguments[1];\n\n        var newFetchedAt = getFetchedAt(newRecords.map(function (_ref) {\n            var id = _ref.id;\n            return id;\n        }), oldRecords.fetchedAt);\n\n        var newRecordsById = newRecords.reduce(function (acc, record) {\n            return (0, _extends5.default)({}, acc, (0, _defineProperty3.default)({}, record.id, record));\n        }, {});\n\n        var records = Object.keys(newFetchedAt).reduce(function (acc, id) {\n            return (0, _extends5.default)({}, acc, (0, _defineProperty3.default)({}, id, newRecordsById[id] || oldRecords[id]));\n        }, {});\n\n        Object.defineProperty(records, 'fetchedAt', {\n            value: newFetchedAt\n        }); // non enumerable by default\n\n        return records;\n    };\n};\n\nvar addRecords = addRecordsFactory(_getFetchedAt2.default);\n\nvar initialState = {};\nObject.defineProperty(initialState, 'fetchedAt', { value: {} }); // non enumerable by default\n\nexports.default = function (resource) {\n    return function () {\n        var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n        var _ref2 = arguments[1];\n        var payload = _ref2.payload,\n            meta = _ref2.meta;\n\n        if (!meta || meta.resource !== resource) {\n            return previousState;\n        }\n        if (!meta.fetchResponse || meta.fetchStatus !== _fetchActions.FETCH_END) {\n            return previousState;\n        }\n        switch (meta.fetchResponse) {\n            case _types.GET_LIST:\n            case _types.GET_MANY:\n            case _types.GET_MANY_REFERENCE:\n                return addRecords(payload.data, previousState);\n            case _types.GET_ONE:\n            case _types.UPDATE:\n            case _types.CREATE:\n                return addRecords([payload.data], previousState);\n            default:\n                return previousState;\n        }\n    };\n};\n\nvar getRecord = exports.getRecord = function getRecord(state, id) {\n    return state[id];\n};"]},"metadata":{},"sourceType":"script"}